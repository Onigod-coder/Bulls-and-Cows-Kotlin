import kotlin.random.Random

fun main() {
    println("=== –ò–ì–†–ê '–ë–´–ö–ò –ò –ö–û–†–û–í–´' ===")
    println("–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥–∞–ª 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ —Å –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Ü–∏—Ñ—Ä–∞–º–∏.")
    println("–ß–∏—Å–ª–æ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª—è!")
    println("–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ.")
    println("–ë—ã–∫ - —Ü–∏—Ñ—Ä–∞ —É–≥–∞–¥–∞–Ω–∞ –∏ —Å—Ç–æ–∏—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
    println("–ö–æ—Ä–æ–≤–∞ - —Ü–∏—Ñ—Ä–∞ —É–≥–∞–¥–∞–Ω–∞, –Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
    println("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã")
    println()
    
    val secretNumber = generateSecretNumber()
    var attempts = 0
    
    while (true) {
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ–ø—ã—Ç–∫—É (4 —Ü–∏—Ñ—Ä—ã): ")
        val input = readLine()?.trim()
        
        if (input == "exit") {
            println("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: ${secretNumber.joinToString("")}")
            break
        }
        
        if (input == null || input.length != 4) {
            println("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã!")
            continue
        }
        
        val guess = input.map { it.toString().toIntOrNull() }
        if (guess.any { it == null }) {
            println("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
            continue
        }
        
        val guessNumbers = guess.map { it!! }
        if (!isValidGuess(guessNumbers)) {
            println("–û—à–∏–±–∫–∞: –≤—Å–µ —Ü–∏—Ñ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏!")
            continue
        }
        
        attempts++
        val result = calculateBullsAndCows(secretNumber, guessNumbers)
        
        println("–ü–æ–ø—ã—Ç–∫–∞ $attempts: ${guessNumbers.joinToString("")}")
        println("–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.first} –±—ã–∫–æ–≤, ${result.second} –∫–æ—Ä–æ–≤")
        println()
        
        if (result.first == 4) {
            println("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∑–∞ $attempts –ø–æ–ø—ã—Ç–æ–∫!")
            break
        }
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ —Å –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Ü–∏—Ñ—Ä–∞–º–∏
 * –ß–∏—Å–ª–æ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª—è
 */
fun generateSecretNumber(): List<Int> {
    val digits = mutableListOf<Int>()
    val availableDigits = (0..9).toMutableList()
    
    repeat(4) {
        val randomIndex = Random.nextInt(availableDigits.size)
        val digit = availableDigits.removeAt(randomIndex)
        digits.add(digit)
    }
    
    return digits
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
 * (4 —Ü–∏—Ñ—Ä—ã, –≤—Å–µ —Ä–∞–∑–Ω—ã–µ)
 */
fun isValidGuess(guess: List<Int>): Boolean {
    return guess.size == 4 && guess.toSet().size == 4
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã–∫–æ–≤ –∏ –∫–æ—Ä–æ–≤
 * @param secret –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
 * @param guess –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å
 * @return –ø–∞—Ä–∞ (–±—ã–∫–∏, –∫–æ—Ä–æ–≤—ã)
 */
fun calculateBullsAndCows(secret: List<Int>, guess: List<Int>): Pair<Int, Int> {
    var bulls = 0
    var cows = 0
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±—ã–∫–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
    for (i in secret.indices) {
        if (secret[i] == guess[i]) {
            bulls++
        }
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
    val secretDigits = secret.toSet()
    val guessDigits = guess.toSet()
    val commonDigits = secretDigits.intersect(guessDigits)
    
    cows = commonDigits.size - bulls
    
    return Pair(bulls, cows)
}